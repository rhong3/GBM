mgtb$right = 0
mgtb$occipital = 0
mgtb$parietal = 0
mgtb[which(grepl("frontal", mgtb$tumor_site, ignore.case=TRUE)), "frontal"] = 1
mgtb[which(grepl("temporal", mgtb$tumor_site, ignore.case=TRUE)), "temporal"] = 1
mgtb[which(grepl("occipital", mgtb$tumor_site, ignore.case=TRUE)), "occipital"] = 1
mgtb[which(grepl("parietal", mgtb$tumor_site, ignore.case=TRUE)), "parietal"] = 1
mgtb[which(grepl("left", mgtb$tumor_site, ignore.case=TRUE)), "left"] = 1
mgtb[which(grepl("right", mgtb$tumor_site, ignore.case=TRUE)), "right"] = 1
mgmg = merge(mgtb, lbtb, by="case_id")
row.names(mgmg) = mgmg$slide_id
write.csv(mgmg, '~/Documents/GBM/feature_summary.csv', row.names=TRUE)
mgmg = subset(mgmg, select=-c(case_id, slide_id, tumor_site, gender, used_in_proteome))
mgmg.gcimp = subset(mgmg, select=-c(immune, telomere))
mgmg.gcimp = na.omit(mgmg.gcimp)
mgmg.immune = subset(mgmg, select=-c(is_gcimp, telomere))
mgmg.immune = na.omit(mgmg.immune)
mgmg.telomere = subset(mgmg, select=-c(is_gcimp, immune))
mgmg.telomere = na.omit(mgmg.telomere)
dat = mgmg.immune[,1:13]
dat$label = mgmg.immune[,14]
dat <- sapply(dat, as.numeric)
smp_size <- floor(0.8 * nrow(dat))
index <- sample(seq_len(nrow(dat)),size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
library(fastDummies)
imtb <- read.csv("~/Documents/GBM/cohort.csv")
imtb <- subset(imtb, select=c(Case_ID,	Slide_ID, Weight,	Tumor_Site,	Percent_Tumor_Nuclei,	Percent_Total_Cellularity,	Percent_Necrosis, Age,	Gender))
colnames(imtb) = tolower(colnames(imtb))
lbtb = read.delim("~/Documents/GBM/gbm_all_subtype_collections.2019-10-13.tsv")
lbtb = subset(lbtb, select=c(case, is_gcimp,	immune,	telomere))
colnames(lbtb) = c('case_id', 'is_gcimp', 'immune', 'telomere')
lbtb$is_gcimp = as.numeric(lbtb$is_gcimp)
lbtb$immune = gsub("high", 1, lbtb$immune)
lbtb$immune = gsub("low", 0, lbtb$immune)
lbtb$telomere = gsub("short", 0, lbtb$telomere)
lbtb$telomere = gsub("normal", 1, lbtb$telomere)
lbtb$telomere = gsub("long", 2, lbtb$telomere)
sptb = read.delim("~/Documents/GBM/tcia_pathology_slides.tsv")
sptb = subset(sptb, select=c(slide_id, case_id, used_in_proteome))
# sptb = sptb[which(sptb$used_in_proteome == TRUE),]
mgtb = merge(imtb, sptb, by=c('slide_id','case_id'), all=FALSE)
mgtb$age = gsub("40-50", 45, mgtb$age)
mgtb$age = gsub("50-60", 55, mgtb$age)
mgtb$age = gsub("20-30", 25, mgtb$age)
mgtb$age = gsub("30-40", 35, mgtb$age)
mgtb$age = gsub("60-70", 65, mgtb$age)
mgtb$age = gsub("70-80", 75, mgtb$age)
mgtb$age = gsub("80-90", 85, mgtb$age)
mgtb$age = as.numeric(mgtb$age)
mgtb <- fastDummies::dummy_cols(mgtb, select_columns = "gender", remove_first_dummy = TRUE)
mgtb$frontal = 0
mgtb$temporal = 0
mgtb$left = 0
mgtb$right = 0
mgtb$occipital = 0
mgtb$parietal = 0
mgtb[which(grepl("frontal", mgtb$tumor_site, ignore.case=TRUE)), "frontal"] = 1
mgtb[which(grepl("temporal", mgtb$tumor_site, ignore.case=TRUE)), "temporal"] = 1
mgtb[which(grepl("occipital", mgtb$tumor_site, ignore.case=TRUE)), "occipital"] = 1
mgtb[which(grepl("parietal", mgtb$tumor_site, ignore.case=TRUE)), "parietal"] = 1
mgtb[which(grepl("left", mgtb$tumor_site, ignore.case=TRUE)), "left"] = 1
mgtb[which(grepl("right", mgtb$tumor_site, ignore.case=TRUE)), "right"] = 1
mgmg = merge(mgtb, lbtb, by="case_id")
row.names(mgmg) = mgmg$slide_id
write.csv(mgmg, '~/Documents/GBM/feature_summary.csv', row.names=TRUE)
mgmg = subset(mgmg, select=-c(case_id, slide_id, tumor_site, gender, used_in_proteome))
mgmg.gcimp = subset(mgmg, select=-c(immune, telomere))
mgmg.gcimp = na.omit(mgmg.gcimp)
mgmg.immune = subset(mgmg, select=-c(is_gcimp, telomere))
mgmg.immune = na.omit(mgmg.immune)
mgmg.telomere = subset(mgmg, select=-c(is_gcimp, immune))
mgmg.telomere = na.omit(mgmg.telomere)
dat = mgmg.immune[,1:13]
dat$label = mgmg.immune[,14]
smp_size <- floor(0.8 * nrow(dat))
index <- sample(seq_len(nrow(dat)),size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
library(fastDummies)
imtb <- read.csv("~/Documents/GBM/cohort.csv")
imtb <- subset(imtb, select=c(Case_ID,	Slide_ID, Weight,	Tumor_Site,	Percent_Tumor_Nuclei,	Percent_Total_Cellularity,	Percent_Necrosis, Age,	Gender))
colnames(imtb) = tolower(colnames(imtb))
lbtb = read.delim("~/Documents/GBM/gbm_all_subtype_collections.2019-10-13.tsv")
lbtb = subset(lbtb, select=c(case, is_gcimp,	immune,	telomere))
colnames(lbtb) = c('case_id', 'is_gcimp', 'immune', 'telomere')
lbtb$is_gcimp = as.numeric(lbtb$is_gcimp)
lbtb$immune = gsub("high", 1, lbtb$immune)
lbtb$immune = gsub("low", 0, lbtb$immune)
lbtb$immune = as.numeric(lbtb$immune)
lbtb$telomere = gsub("short", 0, lbtb$telomere)
lbtb$telomere = gsub("normal", 1, lbtb$telomere)
lbtb$telomere = gsub("long", 2, lbtb$telomere)
lbtb$telomere = as.numeric(lbtb$telomere)
sptb = read.delim("~/Documents/GBM/tcia_pathology_slides.tsv")
sptb = subset(sptb, select=c(slide_id, case_id, used_in_proteome))
# sptb = sptb[which(sptb$used_in_proteome == TRUE),]
mgtb = merge(imtb, sptb, by=c('slide_id','case_id'), all=FALSE)
mgtb$age = gsub("40-50", 45, mgtb$age)
mgtb$age = gsub("50-60", 55, mgtb$age)
mgtb$age = gsub("20-30", 25, mgtb$age)
mgtb$age = gsub("30-40", 35, mgtb$age)
mgtb$age = gsub("60-70", 65, mgtb$age)
mgtb$age = gsub("70-80", 75, mgtb$age)
mgtb$age = gsub("80-90", 85, mgtb$age)
mgtb$age = as.numeric(mgtb$age)
mgtb <- fastDummies::dummy_cols(mgtb, select_columns = "gender", remove_first_dummy = TRUE)
mgtb$frontal = 0
mgtb$temporal = 0
mgtb$left = 0
mgtb$right = 0
mgtb$occipital = 0
mgtb$parietal = 0
mgtb[which(grepl("frontal", mgtb$tumor_site, ignore.case=TRUE)), "frontal"] = 1
mgtb[which(grepl("temporal", mgtb$tumor_site, ignore.case=TRUE)), "temporal"] = 1
mgtb[which(grepl("occipital", mgtb$tumor_site, ignore.case=TRUE)), "occipital"] = 1
mgtb[which(grepl("parietal", mgtb$tumor_site, ignore.case=TRUE)), "parietal"] = 1
mgtb[which(grepl("left", mgtb$tumor_site, ignore.case=TRUE)), "left"] = 1
mgtb[which(grepl("right", mgtb$tumor_site, ignore.case=TRUE)), "right"] = 1
mgmg = merge(mgtb, lbtb, by="case_id")
row.names(mgmg) = mgmg$slide_id
write.csv(mgmg, '~/Documents/GBM/feature_summary.csv', row.names=TRUE)
mgmg = subset(mgmg, select=-c(case_id, slide_id, tumor_site, gender, used_in_proteome))
mgmg.gcimp = subset(mgmg, select=-c(immune, telomere))
mgmg.gcimp = na.omit(mgmg.gcimp)
mgmg.immune = subset(mgmg, select=-c(is_gcimp, telomere))
mgmg.immune = na.omit(mgmg.immune)
mgmg.telomere = subset(mgmg, select=-c(is_gcimp, immune))
mgmg.telomere = na.omit(mgmg.telomere)
dat = mgmg.immune[,1:13]
dat$label = mgmg.immune[,14]
smp_size <- floor(0.8 * nrow(dat))
index <- sample(seq_len(nrow(dat)),size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
plot(cv.out)
cv.out$lambda.min
# Fitting
model =glmnet(as.matrix(train[,1:13]),as.matrix(train$label),alpha=1,lambda=c(cv.out$lambda.min))
# Predict results
results_prob <- predict(model, as.matrix(subset(test,select=c(1:13))),type='response')
# Actual answers
answers <- factor(test$label, levels=c(0,1))
results <- round(results_prob)
results <- factor(results, levels=c(0,1))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
# Average accuracy of the model
print('accuracy:')
acc
# Confusion matrix and plots of fpr and fnr
print('fpr:')
fpr
print('fnr:')
fnr
print('Last miss classification error:')
misClasificError
print(cm)
print(coef(model))
library(rpart)
library(rpart.plot)
library(caret)
binary.model <- rpart(label ~ ., data=train,cp=0.02, method='class')
rpart.plot(binary.model, digit = 3, fallen.leaves = T, varlen=0, type = 3, extra = 106,
main="Response")
# Predict results
results_prob <- predict(binary.model, test[,1:13], type='class')
# Actual answers
answers <- factor(test$label, levels=c(0,1))
results <- factor(results_prob, levels=c(0,1))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
varImp(binary.model)
library(randomForest)
library(rpart.plot)
library(caret)
rf.model <- randomForest(label ~ ., data=train,mtry=4,importance=T)
# Predict results
results_prob <- predict(rf.model, newdata = test[,1:13], type='class')
# Actual answers
answers <- factor(test$label, levels=c(0,1))
results <- round(results_prob)
results <- factor(results, levels=c(0,1))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
varImp(rf.model)
library(gbm)
library(rpart.plot)
library(caret)
gbm.model <- gbm(label ~ ., data=train,distribution = "gaussian", interaction.depth =4,n.trees =300,shrinkage = 0.1,n.cores=2)
# Predict results
results_prob <- predict(gbm.model, newdata = test[,1:13], type="response",n.trees =300)
# Actual answers
answers <- factor(test$label, levels=c(0,1))
results <- round(results_prob)
results <- factor(results, levels=c(0,1))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
summary(gbm.model)
library(e1071)
library(rpart.plot)
library(caret)
svm.model <- svm(label ~ ., data=train, type='C-classification', kernel='linear')
# Predict results
results_prob <- predict(svm.model, newdata = test[,1:13], type="C-classification")
# Actual answers
answers <- factor(test$label, levels=c(0,1))
results <- factor(results_prob, levels=c(0,1))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
library(fastDummies)
imtb <- read.csv("~/Documents/GBM/cohort.csv")
imtb <- subset(imtb, select=c(Case_ID,	Slide_ID, Weight,	Tumor_Site,	Percent_Tumor_Nuclei,	Percent_Total_Cellularity,	Percent_Necrosis, Age,	Gender))
colnames(imtb) = tolower(colnames(imtb))
lbtb = read.delim("~/Documents/GBM/gbm_all_subtype_collections.2019-10-13.tsv")
lbtb = subset(lbtb, select=c(case, is_gcimp,	immune,	telomere))
colnames(lbtb) = c('case_id', 'is_gcimp', 'immune', 'telomere')
lbtb$is_gcimp = as.numeric(lbtb$is_gcimp)
lbtb$immune = gsub("high", 1, lbtb$immune)
lbtb$immune = gsub("low", 0, lbtb$immune)
lbtb$immune = as.numeric(lbtb$immune)
lbtb$telomere = gsub("short", 0, lbtb$telomere)
lbtb$telomere = gsub("normal", 1, lbtb$telomere)
lbtb$telomere = gsub("long", 2, lbtb$telomere)
lbtb$telomere = as.numeric(lbtb$telomere)
sptb = read.delim("~/Documents/GBM/tcia_pathology_slides.tsv")
sptb = subset(sptb, select=c(slide_id, case_id, used_in_proteome))
# sptb = sptb[which(sptb$used_in_proteome == TRUE),]
mgtb = merge(imtb, sptb, by=c('slide_id','case_id'), all=FALSE)
mgtb$age = gsub("40-50", 45, mgtb$age)
mgtb$age = gsub("50-60", 55, mgtb$age)
mgtb$age = gsub("20-30", 25, mgtb$age)
mgtb$age = gsub("30-40", 35, mgtb$age)
mgtb$age = gsub("60-70", 65, mgtb$age)
mgtb$age = gsub("70-80", 75, mgtb$age)
mgtb$age = gsub("80-90", 85, mgtb$age)
mgtb$age = as.numeric(mgtb$age)
mgtb <- fastDummies::dummy_cols(mgtb, select_columns = "gender", remove_first_dummy = TRUE)
mgtb$frontal = 0
mgtb$temporal = 0
mgtb$left = 0
mgtb$right = 0
mgtb$occipital = 0
mgtb$parietal = 0
mgtb[which(grepl("frontal", mgtb$tumor_site, ignore.case=TRUE)), "frontal"] = 1
mgtb[which(grepl("temporal", mgtb$tumor_site, ignore.case=TRUE)), "temporal"] = 1
mgtb[which(grepl("occipital", mgtb$tumor_site, ignore.case=TRUE)), "occipital"] = 1
mgtb[which(grepl("parietal", mgtb$tumor_site, ignore.case=TRUE)), "parietal"] = 1
mgtb[which(grepl("left", mgtb$tumor_site, ignore.case=TRUE)), "left"] = 1
mgtb[which(grepl("right", mgtb$tumor_site, ignore.case=TRUE)), "right"] = 1
mgmg = merge(mgtb, lbtb, by="case_id")
row.names(mgmg) = mgmg$slide_id
write.csv(mgmg, '~/Documents/GBM/feature_summary.csv', row.names=TRUE)
mgmg = subset(mgmg, select=-c(case_id, slide_id, tumor_site, gender, used_in_proteome))
mgmg.gcimp = subset(mgmg, select=-c(immune, telomere))
mgmg.gcimp = na.omit(mgmg.gcimp)
mgmg.immune = subset(mgmg, select=-c(is_gcimp, telomere))
mgmg.immune = na.omit(mgmg.immune)
mgmg.telomere = subset(mgmg, select=-c(is_gcimp, immune))
mgmg.telomere = na.omit(mgmg.telomere)
dat = mgmg.telomere[,1:13]
dat$label = mgmg.telomere[,14]
smp_size <- floor(0.8 * nrow(dat))
index <- sample(seq_len(nrow(dat)),size=smp_size)
train <- dat[index, ]
test <- dat[-index, ]
library(lars)
library(glmnet)
library(caret)
cv.out =cv.glmnet(as.matrix(train[,1:13]), as.matrix(train$label),alpha =1,nfolds=10)
plot(cv.out)
cv.out$lambda.min
# Fitting
model =glmnet(as.matrix(train[,1:13]),as.matrix(train$label),alpha=1,lambda=c(cv.out$lambda.min))
# Predict results
results_prob <- predict(model, as.matrix(subset(test,select=c(1:13))),type='response')
# Actual answers
answers <- factor(test$label, levels=c(0,1,2))
results <- round(results_prob)
results <- factor(results, levels=c(0,1,2))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
# Average accuracy of the model
print('accuracy:')
acc
# Confusion matrix and plots of fpr and fnr
print('fpr:')
fpr
print('fnr:')
fnr
print('Last miss classification error:')
misClasificError
print(cm)
print(coef(model))
library(rpart)
library(rpart.plot)
library(caret)
binary.model <- rpart(label ~ ., data=train,cp=0.02, method='class')
rpart.plot(binary.model, digit = 3, fallen.leaves = T, varlen=0, type = 3, extra = 106,
main="Response")
# Predict results
results_prob <- predict(binary.model, test[,1:13], type='class')
# Actual answers
answers <- factor(test$label, levels=c(0,1,2))
results <- factor(results_prob, levels=c(0,1,2))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
varImp(binary.model)
library(randomForest)
library(rpart.plot)
library(caret)
rf.model <- randomForest(label ~ ., data=train,mtry=4,importance=T)
# Predict results
results_prob <- predict(rf.model, newdata = test[,1:13], type='class')
# Actual answers
answers <- factor(test$label, levels=c(0,1,2))
results <- round(results_prob)
results <- factor(results, levels=c(0,1,2))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
varImp(rf.model)
library(gbm)
library(rpart.plot)
library(caret)
gbm.model <- gbm(label ~ ., data=train,distribution = "gaussian", interaction.depth =4,n.trees =300,shrinkage = 0.1,n.cores=2)
# Predict results
results_prob <- predict(gbm.model, newdata = test[,1:13], type="response",n.trees =300)
# Actual answers
answers <- factor(test$label, levels=c(0,1,2))
results <- round(results_prob)
results <- factor(results, levels=c(0,1,2))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
print('variable importance:')
summary(gbm.model)
library(e1071)
library(rpart.plot)
library(caret)
svm.model <- svm(label ~ ., data=train, type='C-classification', kernel='linear')
# Predict results
results_prob <- predict(svm.model, newdata = test[,1:13], type="C-classification")
# Actual answers
answers <- factor(test$label, levels=c(0,1,2))
results <- factor(results_prob, levels=c(0,1,2))
# Accuracy calculation
misClasificError <- mean(answers != results)
# Collecting results
acc <- 1-misClasificError
# Confusion matrix
cm <- confusionMatrix(data=results, reference=answers)
fpr <- cm$table[2]/nrow(test)
fnr <- cm$table[3]/nrow(test)
print('accuracy:')
acc
print('fpr:')
mean(fpr)
print('fnr:')
mean(fnr)
print('miss classification error:')
misClasificError
print('confusion matrix:')
cm
